<launch>

  <!-- fire up a nodelet manager to handle laser scan tools -->
  <node pkg="nodelet" type="nodelet" name="laser_scan_manager" args="manager" output="screen"/>

  <!-- start LaserScan topic for laser_scan_matcher to create an -->
  <!-- emulated LaserScan topic from Velodyne PointCloud2 output -->
  <!-- (could have used raw PointCloud2 data, but need LaserScan -->
  <!-- later for gmapping/AMCL anyway) -->
  <node pkg="nodelet" type="nodelet" name="emulated_LaserScan" args="load pointcloud_to_laserscan/pointcloud_to_laserscan_nodelet laser_scan_manager" output="screen">
    <remap from="cloud_in" to="/velodyne_points/for_costmap"/>
    <remap from="scan" to="emulated_scan"/>
    <rosparam>
      target_frame: velodyne <!-- transform the pointcloud into this frame before converting to a laser scan -->

      <!-- get these limits out of the way since we're using a cropboxed cloud input already -->
      min_height: -99.0
      max_height: 99.0
      range_min: 0.05
      range_max: 99.0

      angle_min: -3.1415
      angle_max: 3.1415
      angle_increment: 0.01 <!-- too high and Jackal think's there are gaps in the wall it's driving next to that it can fit through, leading to a crash -->
      scan_time: 0.1 <!-- time between scans (in seconds) -->
      concurrency_level: 0 <!-- Number of threads to use for processing pointclouds. If 0, automatically detect number of cores and use the equivalent number of threads. Input queue size for pointclouds is tied to this parameter. In nodelet form, number of threads is capped by the nodelet manager configuration. -->
      use_inf: true <!-- If disabled, report infinite range (no obstacle) as range_max + 1. Otherwise report infinite range as +inf. Associated with the inf_is_valid parameter for costmap_2d obstacle layers. -->
    </rosparam>
  </node>


  <!-- launch laser_scan_matcher, primary output = Pose2D estimate -->
  <node pkg="nodelet" type="nodelet" name="laser_scan_matcher" args="load laser_scan_matcher/LaserScanMatcherNodelet laser_scan_manager " output="screen">
    <!-- inputs -->
    <remap from="scan" to="emulated_scan"/>
    <remap from="odom" to="odom_corrected"/>
    <remap from="laser" to="velodyne"/>

    <!-- outputs -->
    <param name="publish_tf" value="false"/> # true causes issues
    <param name="publish_pose" value="true"/>
    <remap from="pose2D" to="LaserScan/pose2D"/>
    <!-- <remap from="odom_out" to="LaserScan/odom"/> -->

    <!-- motion prediction for faster convergence -->
    <param name="use_imu" value="true"/>
    <param name="use_odom" value="true"/>
    <param name="fixed_frame" value="odom_corrected"/>
    <param name="base_frame" value="base_link"/>

    <!-- KeyFrame params (TL;DR= only update when there's motion) -->
    <param name="kf_dist_linear" value="0.05"/>
    <param name="kf_dist_angular" value="0.1"/>
  </node>

  <!-- this node just converts the above Pose2D estimate to an odom topic for use in EKF -->
  <node pkg="nu_jackal_autonav" type="pose2D_to_odometry.py" name="Pose2D_to_Odometry" output="screen"/>

</launch>
